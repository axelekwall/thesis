
@incollection{hazzan_agile_2014,
	title = {The {Agile} {Manifesto}},
	isbn = {2191-5768},
	url = {https://dx.doi.org/10.1007/978-3-319-10157-6_3},
	booktitle = {Agile {Anywhere}},
	publisher = {Springer International Publishing},
	author = {Hazzan, Orit and Dubinsky, Yael},
	year = {2014},
	doi = {10.1007/978-3-319-10157-6_3},
	pages = {9--14}
}

@article{ball_if_nodate,
	title = {If {Your} {Version} {Control} {System} {Could} {Talk} ...},
	abstract = {Version control systems (VCSs) are used to store and reconstruct past versions of program source code. As a by-product they also capture a great deal of contextual information about each change. We will illustrate some ways to use this information to better understand a program's development history.},
	language = {en},
	author = {Ball, Thomas and Siy, Harvey P},
	pages = {5}
}

@inproceedings{beyer_animated_2006,
	address = {Benevento},
	title = {Animated {Visualization} of {Software} {History} using {Evolution} {Storyboards}},
	isbn = {978-0-7695-2719-2},
	url = {https://ieeexplore.ieee.org/document/4023990/},
	doi = {10.1109/WCRE.2006.14},
	abstract = {The understanding of the structure of a software system can be improved by analyzing the system’s evolution during development. Visualizations of software history that provide only static views do not capture the dynamic nature of software evolution. We present a new visualization technique, the Evolution Storyboard, which provides dynamic views of the evolution of a software’s structure. An evolution storyboard consists of a sequence of animated panels, which highlight the structural changes in the system; one panel for each considered time period. Using storyboards, engineers can spot good design, signs of structural decay, or the spread of cross cutting concerns in the code. We implemented our concepts in a tool, which automatically extracts software dependency graphs from version control repositories and computes storyboards based on panels for different time periods. For applying our approach in practice, we provide a step by step guide that others can follow along the storyboard visualizations, in order to study the evolution of large systems. We have applied our method to several large open source software systems. In this paper, we demonstrate that our method provides additional information (compared to static views) on the ArgoUML project, an open source UML modeling tool.},
	language = {en},
	urldate = {2020-02-19},
	booktitle = {2006 13th {Working} {Conference} on {Reverse} {Engineering}},
	publisher = {IEEE},
	author = {Beyer, Dirk and Hassan, Ahmed E.},
	month = oct,
	year = {2006},
	pages = {199--210}
}

@inproceedings{beyer_evolution_2006,
	address = {Athens, Greece},
	title = {Evolution {Storyboards}: {Visualization} of {Software} {Structure} {Dynamics}},
	isbn = {978-0-7695-2601-0},
	shorttitle = {Evolution {Storyboards}},
	url = {http://ieeexplore.ieee.org/document/1631129/},
	doi = {10.1109/ICPC.2006.21},
	abstract = {Large software systems have a rich development history. Mining certain aspects of this rich history can reveal interesting insights into the system and its structure. Previous approaches to visualize the evolution of software systems provide static views. These static views often do not fully capture the dynamic nature of evolution. We introduce the Evolution Storyboard, a visualization which provides dynamic views of the evolution of a software’s structure. Our tool implementation takes as input a series of software graphs, e.g., call graphs or co-change graphs, and automatically generates an evolution storyboard. To illustrate the concept, we present a storyboard for PostgreSQL, as a representative example for large open source systems. Evolution storyboards help to understand a system’s structure and to reveal its possible decay over time. The storyboard highlights important changes in the structure during the lifetime of a software system, and how artifacts changed their dependencies over time.},
	language = {en},
	urldate = {2020-02-19},
	booktitle = {14th {IEEE} {International} {Conference} on {Program} {Comprehension} ({ICPC}'06)},
	publisher = {IEEE},
	author = {Beyer, D. and Hassan, A.E.},
	year = {2006},
	pages = {248--251}
}

@article{mo_hotspot_nodate,
	title = {Hotspot {Patterns}: {The} {Formal} {Definition} and {Automatic} {Detection} of {Architecture} {Smells}},
	abstract = {In this paper, we propose and empirically validate a suite of hotspot patterns: recurring architecture problems that occur in most complex systems and incur high maintenance costs. In particular, we introduce two novel hotspot patterns, Unstable Interface and Implicit Cross-module Dependency. These patterns are deﬁned based on Baldwin and Clark’s design rule theory, and detected by the combination of history and architecture information. Through our tool-supported evaluations, we show that these patterns not only identify the most error-prone and changeprone ﬁles, they also pinpoint speciﬁc architecture problems that may be the root causes of bugginess and change proneness. Signiﬁcantly, we show that 1) these structure-history integrated patterns contribute more to error- and change-proneness than other hotspot patterns, and 2) the more hotspot patterns a ﬁle is involved in, the more error- and change-prone it is. Finally, we report on an industrial case study to demonstrate the practicality of these hotspot patterns. The architect and developers conﬁrmed that our hotspot detector discovered the majority of the architecture problems causing maintenance pain, and they have started to improve the system’s maintainability by refactoring and ﬁxing the identiﬁed architecture issues.},
	language = {en},
	author = {Mo, Ran and Cai, Yuanfang and Kazman, Rick and Xiao, Lu},
	pages = {10}
}

@inproceedings{verdecchia_architectural_2018,
	address = {Seattle, WA, USA},
	title = {Architectural {Technical} {Debt} {Identification}: {Moving} {Forward}},
	isbn = {978-1-5386-6585-5},
	shorttitle = {Architectural {Technical} {Debt} {Identification}},
	url = {https://ieeexplore.ieee.org/document/8432173/},
	doi = {10.1109/ICSA-C.2018.00018},
	abstract = {Architectural technical debt is a metaphor used to describe sub-optimal architectural design and implementation choices that bring short-term beneﬁts to the cost of the long-term gradual deterioration of the quality of software. Architectural technical debt is an active ﬁeld of research. Nevertheless, how to accurately identify architectural technical debt is still an open question. Our research aims to ﬁll this gap. We strive to: (i) consolidate the existing knowledge of architectural technical debt identiﬁcation in practice, (ii) conceive novel identiﬁcation approaches built upon the existing state of the art techniques and industrial needs, and (iii) provide empirical evidence of architectural technical debt phenomena and assess the viability of the conceived approaches.},
	language = {en},
	urldate = {2020-02-14},
	booktitle = {2018 {IEEE} {International} {Conference} on {Software} {Architecture} {Companion} ({ICSA}-{C})},
	publisher = {IEEE},
	author = {Verdecchia, Roberto},
	month = apr,
	year = {2018},
	pages = {43--44}
}

@inproceedings{seaman_using_2012,
	address = {Zurich, Switzerland},
	title = {Using technical debt data in decision making: {Potential} decision approaches},
	isbn = {978-1-4673-1749-8 978-1-4673-1748-1},
	shorttitle = {Using technical debt data in decision making},
	url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6225999},
	doi = {10.1109/MTD.2012.6225999},
	abstract = {The management of technical debt ultimately requires decision making – about incurring, paying off, or deferring technical debt instances. This position paper discusses several existing approaches to complex decision making, and suggests that exploring their applicability to technical debt decision making would be a worthwhile subject for further research.},
	language = {en},
	urldate = {2020-02-14},
	booktitle = {2012 {Third} {International} {Workshop} on {Managing} {Technical} {Debt} ({MTD})},
	publisher = {IEEE},
	author = {Seaman, Carolyn and Guo, Yuepu and Zazworka, Nico and Shull, Forrest and Izurieta, Clemente and Cai, Yuanfang and Vetro, Antonio},
	month = jun,
	year = {2012},
	pages = {45--48}
}

@incollection{van_der_aalst_visualizing_2013,
	address = {Berlin, Heidelberg},
	title = {Visualizing and {Managing} {Technical} {Debt} in {Agile} {Development}: {An} {Experience} {Report}},
	volume = {149},
	isbn = {978-3-642-38313-7 978-3-642-38314-4},
	shorttitle = {Visualizing and {Managing} {Technical} {Debt} in {Agile} {Development}},
	url = {http://link.springer.com/10.1007/978-3-642-38314-4_9},
	abstract = {This paper reports the experience of an architecture team of a software development department with 25 agile teams in supporting technical decisions regarding technical practices. The main motivation to use technical debt metaphor was its acknowledged potential in driving software development and maintenance decisions, especially those long term maintenance tradeoffs which are usually less visible to developers and decision makers in general. We propose the use of a "technical debt board" with main technical debt categories to manage and visualize the high-level debt, combined with tools to measure it at low-level (software metrics and other kind of static analysis). We have found that our approach improved the teams’ awareness about the technical debt, stimulated a beneficial competition between teams towards the debt payment and enhanced the communication regarding technical decisions.},
	language = {en},
	urldate = {2020-02-12},
	booktitle = {Agile {Processes} in {Software} {Engineering} and {Extreme} {Programming}},
	publisher = {Springer Berlin Heidelberg},
	author = {dos Santos, Paulo Sérgio Medeiros and Varella, Amanda and Dantas, Cristine Ribeiro and Borges, Daniel Beltrão},
	editor = {van der Aalst, Wil and Mylopoulos, John and Rosemann, Michael and Shaw, Michael J. and Szyperski, Clemens and Baumeister, Hubert and Weber, Barbara},
	year = {2013},
	doi = {10.1007/978-3-642-38314-4_9},
	pages = {121--134}
}

@incollection{tjoa_designing_2018,
	address = {Cham},
	title = {Designing a {Technical} {Debt} {Visualization} {Tool} to {Improve} {Stakeholder} {Communication} in the {Decision}-{Making} {Process}: {A} {Case} {Study}},
	volume = {327},
	isbn = {978-3-319-99039-2 978-3-319-99040-8},
	shorttitle = {Designing a {Technical} {Debt} {Visualization} {Tool} to {Improve} {Stakeholder} {Communication} in the {Decision}-{Making} {Process}},
	url = {http://link.springer.com/10.1007/978-3-319-99040-8_2},
	abstract = {Technical debt is the release of immature software to meet time to market. In large complex companies, technical dept drives IT decision, even when participants in the decision-making process do not realize it. In this paper, we propose technical debt visualizations that can serve as a communication platform between different stakeholders. We conducted a case study in a large multi-industry state-owned company that faces signiﬁcant challenges due to global digital transformation, its rigid control structures, and external pressures for cost reduction and investment optimization. In this study, we designed and evaluated technical debt visualizations to get feedback concerning its usefulness and ease its future acceptance. The results from this case study show that technical debt visualizations were considered useful for decision-making processes associated with software life cycle, especially for executives, business managers, software product owners, architects and project managers.},
	language = {en},
	urldate = {2020-02-12},
	booktitle = {Research and {Practical} {Issues} of {Enterprise} {Information} {Systems}},
	publisher = {Springer International Publishing},
	author = {Pacheco, Alexia and Marín-Raventós, Gabriela and López, Gustavo},
	editor = {Tjoa, A Min and Raffai, Maria and Doucek, Petr and Novak, Niina Maarit},
	year = {2018},
	doi = {10.1007/978-3-319-99040-8_2},
	pages = {15--26}
}

@article{alves_identification_2016,
	title = {Identification and management of technical debt: {A} systematic mapping study},
	volume = {70},
	issn = {09505849},
	shorttitle = {Identification and management of technical debt},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0950584915001743},
	doi = {10.1016/j.infsof.2015.10.008},
	abstract = {Objective: This paper has the following goals: to characterize the types of technical debt, identify indicators that can be used to ﬁnd technical debt, identify management strategies, understand the maturity level of each proposal, and identify what visualization techniques have been proposed to support technical debt identiﬁcation and management activities.
Method: A systematic mapping study was performed based on a set of three research questions. In total, 100 studies, dated from 2010 to 2014, were evaluated.
Results: We proposed an initial taxonomy of technical debt types, created a list of indicators that have been proposed to identify technical debt, identiﬁed the existing management strategies, and analyzed the current state of art on technical debt, identifying topics where new research efforts can be invested.
Conclusion: The results of this mapping study can help to identify points that still require further investigation in technical debt research.},
	language = {en},
	urldate = {2020-02-12},
	journal = {Information and Software Technology},
	author = {Alves, Nicolli S.R. and Mendes, Thiago S. and de Mendonça, Manoel G. and Spínola, Rodrigo O. and Shull, Forrest and Seaman, Carolyn},
	month = feb,
	year = {2016},
	pages = {100--121}
}

@book{norman_design_2013,
	address = {New York, New York},
	edition = {Revised and expanded edition},
	title = {The design of everyday things},
	isbn = {978-0-465-05065-9},
	abstract = {"Even the smartest among us can feel inept as we fail to figure out which light switch or oven burner to turn on, or whether to push, pull, or slide a door. The fault, argues this ingenious-even liberating-book, lies not in ourselves, but in product design that ignores the needs of users and the principles of cognitive psychology. The problems range from ambiguous and hidden controls to arbitrary relationships between controls and functions, coupled with a lack of feedback or other assistance and unreasonable demands on memorization. The Design of Everyday Things shows that good, usable design is possible. The rules are simple: make things visible, exploit natural relationships that couple function and control, and make intelligent use of constraints. The goal: guide the user effortlessly to the right action on the right control at the right time. In this entertaining and insightful analysis, cognitive scientist Don Norman hails excellence of design as the most important key to regaining the competitive edge in influencing consumer behavior. Now fully expanded and updated, with a new introduction by the author, The Design of Everyday Things is a powerful primer on how-and why-some products satisfy customers while others only frustrate them. "--},
	language = {en},
	publisher = {Basic Books},
	author = {Norman, Donald A.},
	year = {2013},
	keywords = {BUSINESS \& ECONOMICS / Industries / Retailing, DESIGN / Product, Human engineering, Industrial design, PSYCHOLOGY / Applied Psychology, Psychological aspects}
}

@article{zazworka_comparing_2014,
	title = {Comparing four approaches for technical debt identification},
	volume = {22},
	issn = {0963-9314, 1573-1367},
	url = {http://link.springer.com/10.1007/s11219-013-9200-8},
	doi = {10.1007/s11219-013-9200-8},
	language = {en},
	number = {3},
	urldate = {2020-02-11},
	journal = {Software Quality Journal},
	author = {Zazworka, Nico and Vetro’, Antonio and Izurieta, Clemente and Wong, Sunny and Cai, Yuanfang and Seaman, Carolyn and Shull, Forrest},
	month = sep,
	year = {2014},
	pages = {403--426}
}

@article{letouzey_managing_2012,
	title = {Managing {Technical} {Debt} with the {SQALE} {Method}},
	volume = {29},
	issn = {0740-7459},
	url = {http://ieeexplore.ieee.org/document/6279447/},
	doi = {10.1109/MS.2012.129},
	language = {en},
	number = {6},
	urldate = {2020-02-11},
	journal = {IEEE Software},
	author = {Letouzey, Jean-Louis and Ilkiewicz, Michel},
	month = nov,
	year = {2012},
	pages = {44--51}
}

@article{bavani_distributed_2012,
	title = {Distributed {Agile}, {Agile} {Testing}, and {Technical} {Debt}},
	volume = {29},
	issn = {0740-7459},
	url = {http://ieeexplore.ieee.org/document/6336723/},
	doi = {10.1109/MS.2012.155},
	language = {en},
	number = {6},
	urldate = {2020-02-11},
	journal = {IEEE Software},
	author = {Bavani, Raja},
	month = nov,
	year = {2012},
	pages = {28--33}
}

@inproceedings{verdecchia_architectural_2018-1,
	address = {Gothenburg, Sweden},
	title = {Architectural technical debt identification: the research landscape},
	isbn = {978-1-4503-5713-5},
	shorttitle = {Architectural technical debt identification},
	url = {http://dl.acm.org/citation.cfm?doid=3194164.3194176},
	doi = {10.1145/3194164.3194176},
	abstract = {Architectural Technical Debt (ATD) regards sub-optimal design decisions that bring short-term benefits to the cost of long-term gradual deterioration of the quality of the architecture of a software system. The identification of ATD strongly influences the technical and economic sustainability of software systems and is attracting growing interest in the scientific community. During the years several approaches for ATD identification have been conceived, each of them addressing ATD from different perspectives and with heterogeneous characteristics.},
	language = {en},
	urldate = {2020-02-11},
	booktitle = {Proceedings of the 2018 {International} {Conference} on {Technical} {Debt} - {TechDebt} '18},
	publisher = {ACM Press},
	author = {Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},
	year = {2018},
	pages = {11--20}
}

@article{lim_balancing_2012,
	title = {A {Balancing} {Act}: {What} {Software} {Practitioners} {Have} to {Say} about {Technical} {Debt}},
	volume = {29},
	issn = {0740-7459},
	shorttitle = {A {Balancing} {Act}},
	url = {http://ieeexplore.ieee.org/document/6280547/},
	doi = {10.1109/MS.2012.130},
	language = {en},
	number = {6},
	urldate = {2020-02-11},
	journal = {IEEE Software},
	author = {Lim, Erin and Taksande, Nitin and Seaman, Carolyn},
	month = nov,
	year = {2012},
	pages = {22--27}
}

@article{maccormack_technical_2016,
	title = {Technical debt and system architecture: {The} impact of coupling on defect-related activity},
	volume = {120},
	issn = {01641212},
	shorttitle = {Technical debt and system architecture},
	url = {http://linkinghub.elsevier.com/retrieve/pii/S0164121216300760},
	doi = {10.1016/j.jss.2016.06.007},
	abstract = {Technical Debt is created when design decisions that are expedient in the short term increase the costs of maintaining and adapting this system in future. An important component of technical debt relates to decisions about system architecture. As systems grow and evolve, their architectures can degrade, increasing maintenance costs and reducing developer productivity. This raises the question if and when it might be appropriate to redesign (“refactor”) a system, to reduce what has been called “architectural debt”. Unfortunately, we lack robust data by which to evaluate the relationship between architectural design choices and system maintenance costs, and hence to predict the value that might be released through such refactoring efforts.},
	language = {en},
	urldate = {2020-02-11},
	journal = {Journal of Systems and Software},
	author = {MacCormack, Alan and Sturtevant, Daniel J.},
	month = oct,
	year = {2016},
	pages = {170--182}
}

@article{tom_exploration_2013,
	title = {An exploration of technical debt},
	volume = {86},
	issn = {01641212},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121213000022},
	doi = {10.1016/j.jss.2012.12.052},
	abstract = {Objective: To make a critical examination of technical debt and consolidate understanding of the nature of technical debt and its implications for software development.
Method: An exploratory case study technique that involves multivocal literature review, supplemented by interviews with software practitioners and academics to establish the boundaries of the technical debt phenomenon.
Result: A key outcome of this research is the creation of a theoretical framework that provides a holistic view of technical debt comprising a set of technical debts dimensions, attributes, precedents and outcomes, as well as the phenomenon itself and a taxonomy that describes and encompasses different forms of the technical debt phenomenon.
Conclusion: The proposed framework provides a useful approach to understanding the overall phenomenon of technical debt for practical purposes. Future research should incorporate empirical studies to validate heuristics and techniques that will assist practitioners in their management of technical debt.},
	language = {en},
	number = {6},
	urldate = {2020-02-11},
	journal = {Journal of Systems and Software},
	author = {Tom, Edith and Aurum, Aybüke and Vidgen, Richard},
	month = jun,
	year = {2013},
	pages = {1498--1516}
}

@article{curtis_estimating_2012,
	title = {Estimating the {Principal} of an {Application}'s {Technical} {Debt}},
	volume = {29},
	issn = {0740-7459},
	url = {http://ieeexplore.ieee.org/document/6336724/},
	doi = {10.1109/MS.2012.156},
	language = {en},
	number = {6},
	urldate = {2020-02-11},
	journal = {IEEE Software},
	author = {Curtis, Bill and Sappidi, Jay and Szynkarski, Alexandra},
	month = nov,
	year = {2012},
	pages = {34--42}
}

@article{kruchten_technical_2012,
	title = {Technical {Debt}: {From} {Metaphor} to {Theory} and {Practice}},
	volume = {29},
	issn = {0740-7459},
	shorttitle = {Technical {Debt}},
	url = {http://ieeexplore.ieee.org/document/6336722/},
	doi = {10.1109/MS.2012.167},
	language = {en},
	number = {6},
	urldate = {2020-02-11},
	journal = {IEEE Software},
	author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek},
	month = nov,
	year = {2012},
	pages = {18--21}
}

@article{cunningham_wycash_nodate,
	title = {The {WyCash} portfolio management system},
	language = {en},
	author = {Cunningham, Ward},
	pages = {2}
}

@article{martini_technical_2018,
	title = {Technical {Debt} tracking: {Current} state of practice},
	volume = {163},
	issn = {01676423},
	shorttitle = {Technical {Debt} tracking},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0167642318301035},
	doi = {10.1016/j.scico.2018.03.007},
	abstract = {Large software companies need to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both the evolution and maintenance of existing systems are hampered by Technical Debt. Although a lot of theoretical work on Technical Debt has been produced recently, its practical management lacks empirical studies. In this paper, we investigate the state of practice in several companies to understand what the cost of managing TD is, what tools are used to track TD, and how a tracking process is introduced in practice. We combined two phases: a survey involving 226 respondents from 15 organizations and an in-depth multiple case study in three organizations including 13 interviews and 79 Technical Debt issues. We selected the organizations where Technical Debt was better tracked in order to distill best practices. We found that the development time dedicated to managing Technical Debt is substantial (an average of 25\% of the overall development), but mostly not systematic: only a few participants (26\%) use a tool, and only 7.2\% methodically track Technical Debt. We found that the most used and effective tools are currently backlogs and static analyzers. By studying the approaches in the companies participating in the case study, we report how companies start tracking Technical Debt and what the initial beneﬁts and challenges are. Finally, we propose a Strategic Adoption Model for the introduction of tracking Technical Debt in software organizations.},
	language = {en},
	urldate = {2020-02-11},
	journal = {Science of Computer Programming},
	author = {Martini, Antonio and Besker, Terese and Bosch, Jan},
	month = oct,
	year = {2018},
	pages = {42--61}
}

@incollection{seaman_measuring_2011,
	title = {Measuring and {Monitoring} {Technical} {Debt}},
	volume = {82},
	isbn = {978-0-12-385512-1},
	url = {https://linkinghub.elsevier.com/retrieve/pii/B9780123855121000025},
	abstract = {Technical debt is a metaphor for immature, incomplete, or inadequate artifacts in the software development lifecycle that cause higher costs and lower quality in the long run. These artifacts remaining in a system affect subsequent development and maintenance activities, and so can be seen as a type of debt that the system developers owe the system. Incurring technical debt may speed up software development in the short run, but such benefit is achieved at the cost of extra work in the future, as if paying interest on the debt. In this sense, the technical debt metaphor characterizes the relationship between the short-term benefits of delaying certain software maintenance tasks or doing them quickly and less carefully, and the long-term cost of those delays. However, managing technical debt is more complicated than managing financial debt because of the uncertainty involved. In this chapter, the authors review the main issues associated with technical debt, and propose a technical debt management framework and a research plan for validation. The objective of our research agenda is to develop and validate a comprehensive technical debt theory that formalizes the relationship between the cost and benefit sides of the concept. Further, we propose to use the theory to propose mechanisms (processes and tools) for measuring and managing technical debt in software product maintenance. The theory and management mechanisms are intended ultimately to contribute to the improved quality of software and facilitate decision making in software maintenance.},
	language = {en},
	urldate = {2020-01-31},
	booktitle = {Advances in {Computers}},
	publisher = {Elsevier},
	author = {Seaman, Carolyn and Guo, Yuepu},
	year = {2011},
	doi = {10.1016/B978-0-12-385512-1.00002-5},
	pages = {25--46}
}

@article{siebra_theoretical_2016,
	title = {Theoretical conceptualization of {TD}: {A} practical perspective},
	volume = {120},
	issn = {01641212},
	shorttitle = {Theoretical conceptualization of {TD}},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121216300644},
	doi = {10.1016/j.jss.2016.05.043},
	abstract = {The Technical Debt (TD) metaphor has been used as a way to manage and communicate long-term consequences that some technical decisions may cause. Although intuitive, a lack of practical analysis and demonstrations defers its dissemination over the software community. This exploratory study applied two research methods to characterize the effects associated with a TD item during six years of a real software project lifecycle. First, a quantitative analysis was carried out to characterize the TD item in terms of concrete numbers. Then, Grounded Theory techniques were used to identify categories, properties and their relations, which could together provide a fuller deﬁnition of the TD metaphor. The resultant Grounded Theory, in the form of a concept map, conﬁrmed some elements already identiﬁed by the technical literature, but also raised up new concepts that should be considered during analysis of TD items. Thus, this work contributes to the effort in building a formal theory about TD and provides directions to assist the work of developers/managers who intend to identify and monitor TD items in their projects, given the practical nature of this study.},
	language = {en},
	urldate = {2020-01-31},
	journal = {Journal of Systems and Software},
	author = {Siebra, Clauirton A. and Oliveira, Rebeka G. and Seaman, Carolyn B. and Silva, Fabio Q.B. and Santos, Andre L.M.},
	month = oct,
	year = {2016},
	pages = {219--237}
}

@incollection{li_architectural_2014,
	title = {Architectural {Debt} {Management} in {Value}-{Oriented} {Architecting}},
	isbn = {978-0-12-410464-8},
	url = {https://linkinghub.elsevier.com/retrieve/pii/B978012410464800009X},
	language = {en},
	urldate = {2020-01-31},
	booktitle = {Economics-{Driven} {Software} {Architecture}},
	publisher = {Elsevier},
	author = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
	year = {2014},
	doi = {10.1016/B978-0-12-410464-8.00009-X},
	pages = {183--204}
}

@inproceedings{klotins_exploration_2018,
	address = {Gothenburg, Sweden},
	title = {Exploration of technical debt in start-ups},
	isbn = {978-1-4503-5659-6},
	url = {http://dl.acm.org/citation.cfm?doid=3183519.3183539},
	doi = {10.1145/3183519.3183539},
	abstract = {Objective: In this paper we explore to what extent precedents, dimensions and outcomes associated with technical debt are prevalent in start-ups.
Method: We apply a case survey method to identify aspects of technical debt and contextual information characterizing the engineering context in start-ups.
Results: By analyzing responses from 86 start-up cases we found that start-ups accumulate most technical debt in the testing dimension, despite attempts to automate testing. Furthermore, we found that start-up team size and experience is a leading precedent for accumulating technical debt: larger teams face more challenges in keeping the debt under control.
Conclusions: This study highlights the necessity to monitor levels of technical debt and to preemptively introduce practices to keep the debt under control. Adding more people to an already difficult to maintain product could amplify other precedents, such as resource shortages, communication issues and negatively affect decisions pertaining to the use of good engineering practices.},
	language = {en},
	urldate = {2020-01-31},
	booktitle = {Proceedings of the 40th {International} {Conference} on {Software} {Engineering} {Software} {Engineering} in {Practice} - {ICSE}-{SEIP} '18},
	publisher = {ACM Press},
	author = {Klotins, Eriks and Unterkalmsteiner, Michael and Chatzipetrou, Panagiota and Gorschek, Tony and Prikladnicki, Rafael and Tripathi, Nirnaya and Pompermaier, Leandro Bento},
	year = {2018},
	pages = {75--84}
}

@article{kemerer_empirical_1999,
	title = {An empirical approach to studying software evolution},
	volume = {25},
	issn = {00985589},
	url = {http://ieeexplore.ieee.org/document/799945/},
	doi = {10.1109/32.799945},
	abstract = {ÐWith the approach of the new millennium, a primary focus in software engineering involves issues relating to upgrading, migrating, and evolving existing software systems. In this environment, the role of careful empirical studies as the basis for improving software maintenance processes, methods, and tools is highlighted. One of the most important processes that merits empirical evaluation is software evolution. Software evolution refers to the dynamic behavior of software systems as they are maintained and enhanced over their lifetimes. Software evolution is particularly important as systems in organizations become longer-lived. However, evolution is challenging to study due to the longitudinal nature of the phenomenon in addition to the usual difficulties in collecting empirical data. In this paper, we describe a set of methods and techniques that we have developed and adapted to empirically study software evolution. Our longitudinal empirical study involves collecting, coding, and analyzing more than 25,000 change events to 23 commercial software systems over a 20-year period. Using data from two of the systems, we illustrate the efficacy of flexible phase mapping and gamma sequence analytic methods originally developed in social psychology to examine group problem solving processes. We have adapted these techniques in the context of our study to identify and understand the phases through which a software system travels as it evolves over time. We contrast this approach with time series analysis, the more traditional way of studying longitudinal data. Our work demonstrates the advantages of applying methods and techniques from other domains to software engineering and illustrates how, despite difficulties, software evolution can be empirically studied.},
	language = {en},
	number = {4},
	urldate = {2020-01-27},
	journal = {IEEE Transactions on Software Engineering},
	author = {Kemerer, C.F. and Slaughter, S.},
	month = aug,
	year = {1999},
	pages = {493--509}
}

@article{banker_software_1998,
	title = {Software {Development} {Practices}, {Software} {Complexity}, and {Software} {Maintenance} {Performance}: {A} {Field} {Study}},
	volume = {44},
	issn = {0025-1909, 1526-5501},
	shorttitle = {Software {Development} {Practices}, {Software} {Complexity}, and {Software} {Maintenance} {Performance}},
	url = {http://pubsonline.informs.org/doi/abs/10.1287/mnsc.44.4.433},
	doi = {10.1287/mnsc.44.4.433},
	language = {en},
	number = {4},
	urldate = {2020-01-27},
	journal = {Management Science},
	author = {Banker, Rajiv D. and Davis, Gordon B. and Slaughter, Sandra A.},
	month = apr,
	year = {1998},
	pages = {433--450}
}

@book{koskinen_design_2011,
	address = {Waltham, MA},
	title = {Design research through practice: from the lab, field, and showroom},
	isbn = {978-0-12-385502-2},
	shorttitle = {Design research through practice},
	publisher = {Morgan Kaufmann/Elsevier},
	editor = {Koskinen, Ilpo Kalevi},
	year = {2011},
	note = {OCLC: ocn714729504},
	keywords = {Industrial design}
}

@article{zimmerman_role_2008,
	title = {The {Role} of {Design} {Artifacts} in {Design} {Theory} {Construction}},
	volume = {2},
	issn = {1749-3463, 1749-3471},
	url = {http://scholarworks.iu.edu/journals/index.php/artifact/article/view/3915},
	doi = {10.1080/17493460802276893},
	abstract = {As a discipline evolves, intellectual issues come into focus, and the outcomes of systematic inquiry grow in importance. The discipline of design is facing such a time, as scholars, researchers, and practitioners are devoting attention to creating categories for design practice and design research, articulating methods and processes, and, in some cases, building new design theories. The field of Human–Computer Interaction (HCI) is also experiencing an evolutionary broadening in scope that creates the need for design research. Many designers working in the HCI research community have expressed an increased interest in research through design, a research approach that employs methods and processes from design practice. However, without an agreed form of practice, evaluation, and outcome, it is hard to consistently develop design theory from research to design outcomes. In this paper, the authors begin to identify specific outcomes of research through design that form the basis for theory production. They present the research through design process and two different approaches of research through design (philosophical and grounded) that can lead to formation of design theory. They identify that extensible, systemic approaches to research through design are the most promising ones for developing design theory, and illustrate with examples.},
	language = {en},
	number = {1},
	urldate = {2020-01-21},
	journal = {Artifact},
	author = {Zimmerman, John and Forlizzi, Jodi},
	month = apr,
	year = {2008},
	pages = {41--45}
}

@book{olson_ways_2014,
	address = {New York},
	title = {Ways of knowing in {HCI}},
	isbn = {978-1-4939-0377-1},
	language = {en},
	publisher = {Springer},
	editor = {Olson, Judith S. and Kellogg, Wendy},
	year = {2014},
	note = {OCLC: ocn879418401},
	keywords = {Human-computer interaction}
}

@incollection{olson_research_2014,
	address = {New York, NY},
	title = {Research {Through} {Design} in {HCI}},
	isbn = {978-1-4939-0377-1 978-1-4939-0378-8},
	url = {http://link.springer.com/10.1007/978-1-4939-0378-8_8},
	language = {en},
	urldate = {2020-01-21},
	booktitle = {Ways of {Knowing} in {HCI}},
	publisher = {Springer New York},
	author = {Zimmerman, John and Forlizzi, Jodi},
	editor = {Olson, Judith S. and Kellogg, Wendy A.},
	year = {2014},
	doi = {10.1007/978-1-4939-0378-8_8},
	pages = {167--189}
}

@inproceedings{van_turnhout_design_2014,
	address = {Helsinki, Finland},
	title = {Design patterns for mixed-method research in {HCI}},
	isbn = {978-1-4503-2542-4},
	url = {http://dl.acm.org/citation.cfm?doid=2639189.2639220},
	doi = {10.1145/2639189.2639220},
	abstract = {In this paper we discuss mixed-method research in HCI. We report on an empirical literature study of the NordiCHI 2012 proceedings which aimed to uncover and describe common mixed-method approaches, and to identify good practices for mixed-methods research in HCI. We present our results as mixed-method research design patterns, which can be used to design, discuss and evaluate mixedmethod research. Three dominant patterns are identified and fully described and three additional pattern candidates are proposed. With our pattern descriptions we aim to lay a foundation for a more thoughtful application of, and a stronger discourse about, mixed-method approaches in HCI.},
	language = {en},
	urldate = {2020-01-21},
	booktitle = {Proceedings of the 8th {Nordic} {Conference} on {Human}-{Computer} {Interaction} {Fun}, {Fast}, {Foundational} - {NordiCHI} '14},
	publisher = {ACM Press},
	author = {van Turnhout, Koen and Bakker, René and Bennis, Arthur and Craenmehr, Sabine and Holwerda, Robert and Jacobs, Marjolein and Niels, Ralph and Zaad, Lambert and Hoppenbrouwers, Stijn and Lenior, Dick},
	year = {2014},
	pages = {361--370}
}

@article{stolterman_concept-driven_2010,
	title = {Concept-{Driven} {Interaction} {Design} {Research}},
	volume = {25},
	issn = {0737-0024, 1532-7051},
	url = {https://www.tandfonline.com/doi/full/10.1080/07370020903586696},
	doi = {10.1080/07370020903586696},
	language = {en},
	number = {2},
	urldate = {2020-01-21},
	journal = {Human–Computer Interaction},
	author = {Stolterman, Erik and Wiberg, Mikael},
	month = may,
	year = {2010},
	pages = {95--118}
}

@inproceedings{lavallee_impacts_2012,
	address = {Zurich, Switzerland},
	title = {The impacts of software process improvement on developers: {A} systematic review},
	isbn = {978-1-4673-1067-3 978-1-4673-1066-6 978-1-4673-1065-9},
	shorttitle = {The impacts of software process improvement on developers},
	url = {http://ieeexplore.ieee.org/document/6227201/},
	doi = {10.1109/ICSE.2012.6227201},
	abstract = {This paper presents the results of a systematic review on the impacts of Software Process Improvement (SPI) on developers. This review selected 26 studies from the highest quality journals, conferences, and workshop in the field. The results were compiled and organized following the grounded theory approach. Results from the grounded theory were further categorized using the Ishikawa (or fishbone) diagram. The Ishikawa Diagram models all the factors potentially impacting software developers, and shows both the positive and negative impacts. Positive impacts include a reduction in the number of crises, and an increase in team communications and morale, as well as better requirements and documentation. Negative impacts include increased overhead on developers through the need to collect data and compile documentation, an undue focus on technical approaches, and the fact that SPI is oriented toward management and process quality, and not towards developers and product quality. This systematic review should support future practice through the identification of important obstacles and opportunities for achieving SPI success. Future research should also benefit from the problems and advantages of SPI identified by developers.},
	language = {en},
	urldate = {2020-01-20},
	booktitle = {2012 34th {International} {Conference} on {Software} {Engineering} ({ICSE})},
	publisher = {IEEE},
	author = {Lavallee, Mathieu and Robillard, Pierre N.},
	month = jun,
	year = {2012},
	pages = {113--122}
}

@inproceedings{roehm_how_2012,
	address = {Zurich},
	title = {How do professional developers comprehend software?},
	isbn = {978-1-4673-1066-6 978-1-4673-1067-3},
	url = {http://ieeexplore.ieee.org/document/6227188/},
	doi = {10.1109/ICSE.2012.6227188},
	abstract = {Research in program comprehension has considerably evolved over the past two decades. However, only little is known about how developers practice program comprehension under time and project pressure, and which methods and tools proposed by researchers are used in industry. This paper reports on an observational study of 28 professional developers from seven companies, investigating how developers comprehend software. In particular we focus on the strategies followed, information needed, and tools used.},
	language = {en},
	urldate = {2020-01-20},
	booktitle = {2012 34th {International} {Conference} on {Software} {Engineering} ({ICSE})},
	publisher = {IEEE},
	author = {Roehm, Tobias and Tiarks, Rebecca and Koschke, Rainer and Maalej, Walid},
	month = jun,
	year = {2012},
	pages = {255--265}
}

@inproceedings{meng_history-based_2012,
	address = {Zurich},
	title = {A history-based matching approach to identification of framework evolution},
	isbn = {978-1-4673-1066-6 978-1-4673-1067-3},
	url = {http://ieeexplore.ieee.org/document/6227179/},
	doi = {10.1109/ICSE.2012.6227179},
	abstract = {In practice, it is common that a framework and its client programs evolve simultaneously. Thus, developers of client programs may need to migrate their programs to the new release of the framework when the framework evolves. As framework developers can hardly always guarantee backward compatibility during the evolution of a framework, migration of its client program is often time-consuming and error-prone. To facilitate this migration, researchers have proposed two categories of approaches to identiﬁcation of framework evolution: operation-based approaches and matching-based approaches. To overcome the main limitations of the two categories of approaches, we propose a novel approach named HiMa, which is based on matching each pair of consecutive revisions recorded in the evolution history of the framework and aggregating revision-level rules to obtain framework-evolution rules. We implemented our HiMa approach as an Eclipse plug-in targeting at frameworks written in Java using SVN as the versioncontrol system. We further performed an experimental study on HiMa together with a state-of-art approach named AURA using six tasks based on three subject Java frameworks. Our experimental results demonstrate that HiMa achieves higher precision and higher recall than AURA in most circumstances and is never inferior to AURA in terms of precision and recall in any circumstances, although HiMa is computationally more costly than AURA.},
	language = {en},
	urldate = {2020-01-20},
	booktitle = {2012 34th {International} {Conference} on {Software} {Engineering} ({ICSE})},
	publisher = {IEEE},
	author = {Meng, Sichen and Wang, Xiaoyin and Zhang, Lu and Mei, Hong},
	month = jun,
	year = {2012},
	pages = {353--363}
}

@inproceedings{buse_information_2012,
	address = {Zurich},
	title = {Information needs for software development analytics},
	isbn = {978-1-4673-1066-6 978-1-4673-1067-3},
	url = {http://ieeexplore.ieee.org/document/6227122/},
	doi = {10.1109/ICSE.2012.6227122},
	abstract = {Software development is a data rich activity with many sophisticated metrics. Yet engineers often lack the tools and techniques necessary to leverage these potentially powerful information resources toward decision making. In this paper, we present the data and analysis needs of professional software engineers, which we identiﬁed among 110 developers and managers in a survey. We asked about their decision making process, their needs for artifacts and indicators, and scenarios in which they would use analytics.},
	language = {en},
	urldate = {2020-01-20},
	booktitle = {2012 34th {International} {Conference} on {Software} {Engineering} ({ICSE})},
	publisher = {IEEE},
	author = {Buse, Raymond P. L. and Zimmermann, Thomas},
	month = jun,
	year = {2012},
	pages = {987--996}
}

@article{johnson_top_2004,
	title = {Top scientific visualization research problems},
	volume = {24},
	issn = {0272-1716},
	url = {http://ieeexplore.ieee.org/document/1310205/},
	doi = {10.1109/MCG.2004.20},
	language = {en},
	number = {4},
	urldate = {2020-01-16},
	journal = {IEEE Computer Graphics and Applications},
	author = {Johnson, C.},
	month = jul,
	year = {2004},
	pages = {13--17}
}

@article{voinea_cvsscan:_nodate,
	title = {{CVSscan}: {Visualization} of {Code} {Evolution}},
	abstract = {During the life cycle of a software system, the source code is changed many times. We study how developers can be enabled to get insight in these changes, in order to understand the status, history and structure better, as well as for instance the roles played by various contributors. We present CVSscan, an integrated multiview environment for this. Central is a lineoriented display of the changing code, where each version is represented by a column, and where the horizontal direction is used for time, Separate linked displays show various metrics, as well as the source code itself. A large variety of options is provided to visualize a number of different aspects. Informal user studies demonstrate the efficiency of this approach for real world use cases.},
	language = {en},
	author = {Voinea, Lucian and Telea, Alex and van Wijk, Jarke J},
	pages = {12}
}

@article{ogawa_code_swarm:_2009,
	title = {code\_swarm: {A} {Design} {Study} in {Organic} {Software} {Visualization}},
	volume = {15},
	issn = {1077-2626},
	shorttitle = {code\_swarm},
	url = {http://ieeexplore.ieee.org/document/5290717/},
	doi = {10.1109/TVCG.2009.123},
	abstract = {In May of 2008, we published online a series of software visualization videos using a method called code swarm. Shortly thereafter, we made the code open source and its popularity took off. This paper is a study of our code swarm application, comprising its design, results and public response. We share our design methodology, including why we chose the organic information visualization technique, how we designed for both developers and a casual audience, and what lessons we learned from our experiment. We validate the results produced by code swarm through a qualitative analysis and by gathering online user comments. Furthermore, we successfully released the code as open source, and the software community used it to visualize their own projects and shared their results as well. In the end, we believe code swarm has positive implications for the future of organic information design and open source information visualization practice.},
	language = {en},
	number = {6},
	urldate = {2020-01-16},
	journal = {IEEE Transactions on Visualization and Computer Graphics},
	author = {Ogawa, M. and {Kwan-Liu Ma}},
	month = nov,
	year = {2009},
	pages = {1097--1104}
}

@inproceedings{wettel_visualizing_2007,
	address = {Banff, AB, Canada},
	title = {Visualizing {Software} {Systems} as {Cities}},
	isbn = {978-1-4244-0599-2 978-1-4244-0600-5},
	url = {http://ieeexplore.ieee.org/document/4290706/},
	doi = {10.1109/VISSOF.2007.4290706},
	abstract = {This paper presents a 3D visualization approach which gravitates around the city metaphor, i.e., an object-oriented software system is represented as a city that can be traversed and interacted with: the goal is to give the viewer a sense of locality to ease program comprehension.},
	language = {en},
	urldate = {2020-01-16},
	booktitle = {2007 4th {IEEE} {International} {Workshop} on {Visualizing} {Software} for {Understanding} and {Analysis}},
	publisher = {IEEE},
	author = {Wettel, Richard and Lanza, Michele},
	month = jun,
	year = {2007},
	pages = {92--99}
}

@incollection{mens_analysing_2008,
	address = {Berlin, Heidelberg},
	title = {Analysing {Software} {Repositories} to {Understand} {Software} {Evolution}},
	isbn = {978-3-540-76439-7 978-3-540-76440-3},
	url = {http://link.springer.com/10.1007/978-3-540-76440-3_3},
	abstract = {Software repositories such as versioning systems, defect tracking systems, and archived communication between project personnel are used to help manage the progress of software projects. Software practitioners and researchers increasingly recognize the potential beneﬁt of mining this information to support the maintenance of software systems, improve software design or reuse, and empirically validate novel ideas and techniques. Research is now proceeding to uncover ways in which mining these repositories can help to understand software development, to support predictions about software development, and to plan various evolutionary aspects of software projects.},
	language = {en},
	urldate = {2020-01-16},
	booktitle = {Software {Evolution}},
	publisher = {Springer Berlin Heidelberg},
	author = {D’Ambros, Marco and Gall, Harald and Lanza, Michele and Pinzger, Martin},
	collaborator = {Mens, Tom and Demeyer, Serge},
	year = {2008},
	doi = {10.1007/978-3-540-76440-3_3},
	pages = {37--67}
}

@article{heer_software_2006,
	title = {Software {Design} {Patterns} for {Information} {Visualization}},
	volume = {12},
	issn = {1077-2626},
	url = {http://ieeexplore.ieee.org/document/4015439/},
	doi = {10.1109/TVCG.2006.178},
	abstract = {Despite a diversity of software architectures supporting information visualization, it is often difficult to identify, evaluate, and re-apply the design solutions implemented within such frameworks. One popular and effective approach for addressing such difficulties is to capture successful solutions in design patterns, abstract descriptions of interacting software components that can be customized to solve design problems within a particular context. Based upon a review of existing frameworks and our own experiences building visualization software, we present a series of design patterns for the domain of information visualization. We discuss the structure, context of use, and interrelations of patterns spanning data representation, graphics, and interaction. By representing design knowledge in a reusable form, these patterns can be used to facilitate software design, implementation, and evaluation, and improve developer education and communication.},
	language = {en},
	number = {5},
	urldate = {2020-01-16},
	journal = {IEEE Transactions on Visualization and Computer Graphics},
	author = {Heer, Jeffrey and Agrawala, Maneesh},
	month = sep,
	year = {2006},
	pages = {853--860}
}

@inproceedings{ogawa_software_2010,
	address = {Salt Lake City, Utah, USA},
	title = {Software evolution storylines},
	isbn = {978-1-4503-0028-5},
	url = {http://portal.acm.org/citation.cfm?doid=1879211.1879219},
	doi = {10.1145/1879211.1879219},
	abstract = {This paper presents a technique for visualizing the interactions between developers in software project evolution. The goal is to produce a visualization that shows more detail than animated software histories, like code swarm [15], but keeps the same focus on aesthetics and presentation. Our software evolution storylines technique draws inspiration from XKCD’s “Movie Narrative Charts” and the aesthetic design of metro maps. We provide the algorithm, design choices, and examine the results of using the storylines technique. Our conclusion is that the it is able to show more details when compared to animated software project history videos. However, it does not scale to the largest projects, such as Eclipse and Mozilla.},
	language = {en},
	urldate = {2020-01-16},
	booktitle = {Proceedings of the 5th international symposium on {Software} visualization - {SOFTVIS} '10},
	publisher = {ACM Press},
	author = {Ogawa, Michael and Ma, Kwan-Liu},
	year = {2010},
	pages = {35}
}
@incollection{huang_user_2014,
	address = {New York, NY},
	title = {User {Studies} in {Visualization}: {A} {Reflection} on {Methods}},
	isbn = {978-1-4614-7484-5 978-1-4614-7485-2},
	shorttitle = {User {Studies} in {Visualization}},
	url = {http://link.springer.com/10.1007/978-1-4614-7485-2_16},
	abstract = {In this chapter I will reﬂect on many years of running user studies in visualization, examining my experience with how effectively different methodological approaches worked for different goals. I ﬁrst introduce my own categorization of user studies based on their major goals (understanding versus evaluation, each with speciﬁc subcategories) and common methodological approaches (quantitative experiment, qualitative observational study, inspection, and usability study), providing examples of each combination. I then use examples from my own experience to reﬂect upon the strengths and weaknesses of each methodological approach.},
	language = {en},
	urldate = {2020-01-16},
	booktitle = {Handbook of {Human} {Centric} {Visualization}},
	publisher = {Springer New York},
	author = {Tory, Melanie},
	editor = {Huang, Weidong},
	year = {2014},
	doi = {10.1007/978-1-4614-7485-2_16},
	pages = {411--426}
}

@book{huang_handbook_2014,
	address = {New York, NY},
	title = {Handbook of human centric visualization},
	isbn = {978-1-4614-7484-5},
	language = {en},
	publisher = {Springer},
	editor = {Huang, Weidong and Eades, Peter},
	year = {2014},
	note = {OCLC: ocn832271748},
	keywords = {Communicatie, Computergraphics, Datamining, Handbooks, manuals, etc, Human-computer interaction, Information visualization, Mens-computer-interactie, Psychologische aspecten, Visualisatie}
}

@inproceedings{kosara_visualization_2007,
	title = {Visualization {Criticism} - {The} {Missing} {Link} {Between} {Information} {Visualization} and {Art}},
	isbn = {1550-6037},
	url = {https://dx.doi.org/10.1109/IV.2007.130},
	doi = {10.1109/iv.2007.130},
	publisher = {IEEE},
	author = {Kosara, Robert},
	year = {2007}
}

@inproceedings{feldt_supporting_2013,
	address = {Santander, Spain},
	title = {Supporting {Software} {Decision} {Meetings}: {Heatmaps} for {Visualising} {Test} and {Code} {Measurements}},
	isbn = {978-0-7695-5091-6},
	shorttitle = {Supporting {Software} {Decision} {Meetings}},
	url = {http://ieeexplore.ieee.org/document/6619490/},
	doi = {10.1109/SEAA.2013.61},
	abstract = {To achieve software quality it is critical to quickly understand the current test status, its changes over time as well as its relation to source code changes. However, even if this information is available in test logs and code repositories it is seldomly put to good use in supporting decision processes in software development. The amount of information is often large, is time consuming to extract and hard to monitor. This case study shows how visualisation and correlation between software measurements can support improvement discussions. In particular, simple heatmaps were found to be effective to visualize and monitor changes and identify recurring patterns in the development of a space-bourn, embedded control system. Statistical analysis quantiﬁed the correlation between different sources of development data and heatmaps then effectively focused the attention of stakeholders to importants parts of the system. Here the visual analysis was focused on post-project, historical data but we discuss how early identiﬁcation based on dynamic data analysis could support more effective analysis, planning and execution of quality assurance. Based on our ﬁndings we state requirements on such an online, visual analysis system and present a prototype implementation that can help software measurements better support value-based decisions in software development.},
	language = {en},
	urldate = {2020-01-16},
	booktitle = {2013 39th {Euromicro} {Conference} on {Software} {Engineering} and {Advanced} {Applications}},
	publisher = {IEEE},
	author = {Feldt, Robert and Staron, Miroslaw and Hult, Erika and Liljegren, Thomas},
	month = sep,
	year = {2013},
	pages = {62--69}
}